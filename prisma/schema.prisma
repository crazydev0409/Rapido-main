generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id
  active      Boolean?
  name        String?
  description String?
  image       String?
  metadata    Json?
  prices      Price[]

  @@map("products")
}

model Customer {
  customerId   String         @unique @map("stripe_customer_id")
  userId       String         @id @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  invitations  Invitation[]
  subscription Subscription[]

  @@map("customers")
}

model Invitation {
  id             String            @id @default(cuid())
  to             String
  code           String            @unique
  planId         String
  status         INVITATION_STATUS
  created        DateTime          @default(now())
  expire         DateTime?
  userId         String            @map("user_id")
  customerId     String?           @map("customer_id")
  payingCustomer Customer?         @relation(fields: [customerId], references: [customerId])
  fromUser       User              @relation(fields: [userId], references: [id])

  @@map("invitation")
}

model Price {
  id              String               @id
  active          Boolean?
  description     String?
  unitAmount      BigInt?              @map("unit_amount")
  currency        String?              @db.VarChar(3)
  type            PricingType?
  interval        PricingPlanInterval?
  intervalCount   Int?                 @map("interval_count")
  trialPeriodDays Int?                 @map("trial_period_days")
  metadata        Json?
  productId       String               @map("product_id")
  product         Product              @relation(fields: [productId], references: [id])
  subscriptions   Subscription[]

  @@map("prices")
}

model Subscription {
  id                 String              @id
  status             SubscriptionStatus?
  metadata           Json?
  quantity           Int?
  cancelAtPeriodEnd  Boolean?            @map("cancel_at_period_end")
  created            DateTime?           @default(now())
  currentPeriodStart DateTime?           @default(now()) @map("current_period_start")
  currentPeriodEnd   DateTime?           @default(now()) @map("current_period_end")
  endedAt            DateTime?           @map("ended_at")
  cancelAt           DateTime?           @map("cancel_at")
  canceledAt         DateTime?           @map("canceled_at")
  trialStart         DateTime?           @map("trial_start")
  trialEnd           DateTime?           @map("trial_end")
  customerId         String              @map("customer_id")
  priceId            String              @map("price_id")
  customer           Customer            @relation(fields: [customerId], references: [customerId])
  price              Price               @relation(fields: [priceId], references: [id])

  @@map("subscriptions")
}


model Nutrients{
  id            String     @id @default(cuid())
  name        String?
  value          Float?

  updatedDate   DateTime  @default(now()) @updatedAt
  source NUTRIENTS_SOURCE

  dayNutritionId   String     @map("day_nutrition_id")
  dayNutrition          DayNutrition       @relation(fields: [dayNutritionId], references: [id])

  mealNutritionId   String?     @map("meal_nutrition_id")
  mealNutrition          MealNutrition?       @relation(fields: [mealNutritionId], references: [id])

  @@unique([source, dayNutritionId, mealNutritionId, name])
  @@map("nutrients")
}
model DayNutrition{
  id  String         @id @default(cuid())

  userId             String     @map("user_id")
  user               User       @relation(fields: [userId], references: [id])

  day               DateTime   @db.Date
  carbsPerKg        Float?

  nutrients          Nutrients[]

  mealNutritions      MealNutrition[]


  @@unique([userId, day])
  @@map("day_nutrition")
}

model MealNutrition {
  id            String     @id @default(cuid())

  dayId           String   @map("day_id")
  dayNutrition          DayNutrition       @relation(fields: [dayId], references: [id])

  // for pattern meals
  mealTemplateId          String?   @map("meal_template_id")
  mealTemplate            MealTemplate?       @relation(fields: [mealTemplateId], references: [id])

  // for intra fulling meals
  wrokoutId       String?    @map("workout_id") @unique
  workout         Workout?  @relation(fields: wrokoutId, references: id)

  carbCode        CARB_CODE?
  mealName        String?                 // intra fuling has no name
  time            DateTime?  @db.Time(6)  // intra fuling has no time
  mealType        MEAL_TYPE     @map("meal_type")
  mealSubType     MEAL_SUB_TYPE @map("meal_sub_type")

  nutrients       Nutrients[]

  status          MEAL_NUTRITION_STATUS

  mealVerification    MealVerification?

  @@unique([mealTemplateId, dayId])
  @@map("meal_nutrition")
}

model Mealplan {
  id            String         @id @default(cuid())
  created       DateTime       @default(now())
  updated       DateTime       @default(now()) @updatedAt
  mealTemplates MealTemplate[]
  mealplanMeals MealplanMeal[]
  userAudits    UserAudit[]
  users         User[]

  @@map("mealplans")
}

model MealTemplate {
  id              String    @id @default(cuid())

  mealType        MEAL_TYPE      @map("meal_type")
  mealSubType     MEAL_SUB_TYPE  @map("meal_sub_type")

  mealName        String?                 // intra fuling has no name
  time            DateTime?  @db.Time(6)  // intra fuling has no time

  mealplanId      String    @map("mealplan_id")
  mealplan        Mealplan  @relation(fields: [mealplanId], references: [id])

  //plan meal
  dayName         DAY_NAMES


  mealsNutrition         MealNutrition[]


  @@map("meal_template")
}

model MealplanMeal {
  id         String    @id @default(cuid())
  slot       MEAL_NAME
  time       DateTime  @db.Time(6)
  mealplanId String    @map("mealplan_id")
  mealplan   Mealplan  @relation(fields: [mealplanId], references: [id])

  @@map("mealplan_meals")
}

model MealVerification {
  id        String     @id @default(cuid())
  energy      Float?
  time      DateTime?
  carbCode  CARB_CODE? @map("carb_code")

  mealNutritionId String? @unique
  mealNutrition      MealNutrition?       @relation(fields: mealNutritionId, references: id)

  skipped   Boolean?
  userId    String     @map("user_id")
  user      User       @relation(fields: [userId], references: [id])

// TODO: remove these two fields after migration
slot      MEAL_NAME?
workoutId String?    @unique @map("workout_id")

  @@map("meal_verifications")
}

model Workout {
  id                  String                      @id @default(cuid())
  start               DateTime
  end                 DateTime
  startTime           DateTime?                @map("start_time") @db.Time(6)
  intensity           WORKOUT_INTENSITY?
  intensityRPE        Int                     @default(0) // TODO: Plese remove default after migration
  slot                WORKOUT_SLOT
  key                 Boolean                     @default(false) @map("is_key")
  competition         Boolean                     @default(false) @map("is_competition")
  recurring           Boolean                     @default(false)
  recurringDay        Int?                        @map("recurring_day")
  recurringInterval   WORKOUT_RECURRING_INTERVAL? @map("recurring_interval")
  userId              String                      @map("user_id")
  activityId          String                      @map("activity_id")
  recurringWorkoutId  String?                     @map("recurring_workout_id")
  recurringDeleted    DateTime?                   @map("recurring_deleted")
  calories            Float?
  confirmed           Boolean                     @default(false)
  externalReference   String?                     @map("externalReference")
  source              WORKOUT_SOURCE              @default(USER)
  status              WORKOUT_STATUS              @default(ACTIVE)
  utcOffset           Int?                        @map("utc_offset")
  intraFuelling       Boolean                     @default(false) @map("intra_fuelling")
  intraFuellingPrompt Boolean                     @default(false) @map("intra_fuelling_prompt")
  description         String?
  title               String?
  intraFuellingMeal   MealNutrition?
  activity            Activity                    @relation(fields: [activityId], references: [id])
  user                User                        @relation(fields: [userId], references: [id])
  powerAverage        Float      @default(0) // TODO: Plese remove default after migration

  @@map("workouts")
}

model UserAudit {
  id                    BigInt                   @id @default(autoincrement())
  dob                   DateTime?                @db.Date
  sex                   SEX?
  height                Float?
  weight                Float?
  wakeTime              DateTime?                @map("wake_time") @db.Time(6)
  sleepTime             DateTime?                @map("sleep_time") @db.Time(6)
  goal                  GOAL?
  lifestyleActivity     LIFESTYLE_ACTIVITY?      @map("lifestyle_activity")
  totalActivityDuration TOTAL_ACTIVITY_DURATION? @map("total_activity_duration")
  primaryActivityId     String?                  @map("primary_activity_id")
  mealplanId            String?                  @map("mealplan_id")
  userId                String                   @map("user_id")
  created               DateTime                 @default(now())
  date                  DateTime                 @default(now()) @db.Date
  mealplan              Mealplan?                @relation(fields: [mealplanId], references: [id])
  primaryActivity       Activity?                @relation(fields: [primaryActivityId], references: [id])
  user                  User                     @relation(fields: [userId], references: [id])

  @@unique([date, userId])
  @@map("user_audit")
}

model User {
  id                    String                   @id @default(cuid())
  gotrueId              String                   @unique @map("gotrue_id")
  firstName             String                   @map("first_name")
  lastName              String                   @map("last_name")
  email                 String                   @unique
  dob                   DateTime?                @db.Date
  genderIdentity        String?                  @map("gender_identity")
  sex                   SEX?
  height                Float?
  weight                Float?
  weightUnit            WEIGHT_UNIT              @default(KG) @map("weight_unit")
  heightUnit            HEIGHT_UNIT              @default(M) @map("height_unit")
  wakeTime              DateTime?                @map("wake_time") @db.Time(6)
  sleepTime             DateTime?                @map("sleep_time") @db.Time(6)
  goal                  GOAL?
  targetWeight          Float?                   @map("target_weight")
  lifestyleActivity     LIFESTYLE_ACTIVITY?      @map("lifestyle_activity")
  totalActivityDuration TOTAL_ACTIVITY_DURATION? @map("total_activity_duration")
  newsletterSubscriber  Boolean                  @default(false) @map("newsletter_subscriber")
  onboardingComplete    DateTime?
  created               DateTime                 @default(now())
  updated               DateTime                 @default(now()) @updatedAt
  mealplanId            String?                  @map("mealplan_id")
  pointId               String?                  @map("point_id")
  pointRefreshToken     String?                  @map("point_refresh_token")
  timezone              String?
  wearableId            String?
  Efficiency            Float?
  RMR                   Float?
  notificationTokens    NotificationToken[]
  clientNotes           CoachNotes[]             @relation("client_notes")
  coachClientNotes      CoachNotes[]             @relation("coach_notes")
  customer              Customer?
  myGroups              Group[]                  @relation("coach")
  invitations           Invitation[]
  mealVerifications     MealVerification[]
  favouriteActivities   UserActivity[]
  userAudit             UserAudit[]
  mealplan              Mealplan?                @relation(fields: [mealplanId], references: [id])
  wearables             WearableSource[]
  workouts              Workout[]
  assignedGroups        Group[]                  @relation("GroupToUser")
  dayNutrition        DayNutrition[]

  @@map("users")
}

model UserActivity {
  id         String   @id @default(cuid())
  primary    Boolean  @default(false)
  activityId String   @map("activity_id")
  userId     String   @map("user_id")
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([activityId, userId])
  @@map("user_activities")
}

model Activity {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  level             ACTIVITY_LEVEL
  levelType         ACTIVITY_LEVEL_TYPE @map("level_type")
  epochModerate     Float               @map("epoch_moderate")
  epochHard         Float               @map("epoch_hard")
  created           DateTime            @default(now())
  updated           DateTime            @default(now()) @updatedAt
  intraCompHard     Float               @default(0) @map("intra_comp_hard")
  intraCompLight    Float               @default(0) @map("intra_comp_light")
  intraCompModerate Float               @default(0) @map("intra_comp_moderate")
  intraHard         Float               @default(0) @map("intra_hard")
  intraLight        Float               @default(0) @map("intra_light")
  intraModerate     Float               @default(0) @map("intra_moderate")
  met               ActivityMet[]
  userFavourites    UserActivity[]
  userAudits        UserAudit[]
  Workout           Workout[]
  category          String    @default("ENDURANCE") // TODO: Plese remove default after migration

  @@map("activities")
}

model ActivityMet {
  id         String            @id @default(cuid())
  heavy      Float
  light      Float
  sex        SEX
  intensity  WORKOUT_INTENSITY
  activityId String            @map("activity_id")
  activity   Activity          @relation(fields: [activityId], references: [id])

  @@map("activity_mets")
}

model Mapping {
  id     String @id @default(cuid())
  name   String
  value1 String
  value2 String
  field1 String
  field2 String

  @@map("mapping")
}

model Log {
  id                String          @id @default(cuid())
  verificationId    String          @map("verification_id")
  portion           String
  nutriticsObjectId String          @map("nutritics_object_id")
  quantity          Float
  nutriticsObject   NutriticsObject @relation(fields: [nutriticsObjectId], references: [id])

  @@map("log")
}

model NutriticsDB {
  id               String            @id @default(cuid())
  name             String?
  description      String?
  country          String?
  code             String
  nutriticsObjects NutriticsObject[]

  @@map("nutritics_db")
}

model NutriticsObject {
  id            String             @id @default(cuid())
  nutriticsID   Int                @map("nutritics_id")
  created_at    DateTime?          @default(now()) @db.Timestamptz(6)
  type          NUTRITICS_OBJ_TYPE
  JSONObj       String?            @map("json_obj")
  hash          String?
  nutriticsDBId String             @map("nutritics_DB_Id")
  version       Float
  page          Int?
  description   String?
  name          String?
  userId        String?
  log           Log[]
  nutriticsDB   NutriticsDB        @relation(fields: [nutriticsDBId], references: [id])

  @@map("nutritics_object")
}

model CoachNotes {
  id                String           @id @default(cuid())
  title             String
  body              String
  clientId          String
  coachId           String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?
  dayNoteDay        DateTime?
  utcOffset         Int?
  alertNotification Boolean?
  type              COACH_NOTE_TYPES @default(CLIENT)
  client            User             @relation("client_notes", fields: [clientId], references: [id])
  coach             User             @relation("coach_notes", fields: [coachId], references: [id])

  @@map("coach_notes")
}

model WearableSource {
  id               String                @id @default(cuid())
  userId           String                @map("user_id")
  name             String
  status           WEARABLE_STATUS
  updatedAt        DateTime              @updatedAt
  authorizationUrl String?               @map("authorization_url")
  description      String
  image            String
  platform         WEARABLE_PLATFORM?
  code             String?
  user             User                  @relation(fields: [userId], references: [id])
  type             WEARABLE_SOURCE_TYPE? @default(UNSPECIFIED) // TODO: Remove optional after migration

  @@map("wearable_source")
}

model Group {
  id          String   @id @default(cuid())
  coachId     String   @map("coach_id")
  name        String
  description String?
  createdAt   DateTime
  link        String?
  coach       User     @relation("coach", fields: [coachId], references: [id])
  clients     User[]   @relation("GroupToUser")

  @@map("group")
}

model NotificationToken {
  id     String @id @default(cuid())
  token  String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  @@map("notification_token")
}

enum NUTRIENTS_SOURCE {
  COACH
  HEXIS
}

enum MEAL_NUTRITION_STATUS {
  ACTIVE
  DELETED
}

enum DAY_NAMES {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum SEX {
  MALE
  FEMALE
}

enum WEIGHT_UNIT {
  KG
  LBS
}

enum HEIGHT_UNIT {
  M
  FT
}

enum TOTAL_ACTIVITY_DURATION {
  ZERO_TO_THREE_HOURS
  THREE_TO_SIX_HOURS
  SIX_TO_NINE_HOURS
  NINE_TO_TWELVE_HOURS
  TWELVE_PLUS_HOURS
}

enum LIFESTYLE_ACTIVITY {
  SEDENTARY
  LIGHTLY_ACTIVE
  ACTIVE
  PRO_ATHLETE
}

enum GOAL {
  LOSE
  MAINTAIN
  GAIN
}

enum ACTIVITY_LEVEL {
  RECOVERY
  STRENGTH
  PERFORMANCE
}

enum ACTIVITY_LEVEL_TYPE {
  HIIT_LV
  HIIT_MV
  HIIT_HV
  ARTISTIC
  LIGHT
  COMBAT
  ENDURANCE
  STRENGTH
}

enum WORKOUT_INTENSITY {
  LIGHT
  MODERATE
  HARD
  UNSPECIFIED
}

enum WORKOUT_SOURCE {
  USER
  POINT
  COACH
  WEARABLE
  TRAINING_PEAKS
  APPLE_HEALTH
  HEALTH_CONNECT
  GARMIN
}

enum WORKOUT_STATUS {
  ACTIVE
  CONFLICTED
  WAITING
  INCOMPLETE
  DISCARDED
}

enum MEAL_NAME {
  BREAKFAST
  AM_SNACK
  LUNCH
  PM_SNACK
  DINNER
  PRE_BED_SNACK
  INTRA_FUELLING
}

enum MEAL_TYPE {
  MAIN
  SNACK
  INTRA_FUELLING
}
enum MEAL_SUB_TYPE {
  BREAKFAST
  AM_SNACK
  LUNCH
  PM_SNACK
  DINNER
  PRE_BED_SNACK
  UNSPECIFIED
}

enum CARB_CODE {
  LOW
  MEDIUM
  HIGH
  UNSPECIFIED
}

enum WORKOUT_SLOT {
  BEFORE_BREAKFAST
  BEFORE_AM_SNACK
  BEFORE_LUNCH
  BEFORE_PM_SNACK
  BEFORE_DINNER
  BEFORE_PRE_BED_SNACK
  UNSPECIFIED
}

enum WORKOUT_RECURRING_INTERVAL {
  MONTHLY
  WEEKLY
}

enum PricingType {
  one_time
  recurring
}

enum PricingPlanInterval {
  day
  week
  month
  year
}

enum SubscriptionStatus {
  trialing
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  unpaid
  all
  ended
}

enum NUTRITICS_OBJ_TYPE {
  food
  recipe
}

enum INVITATION_STATUS {
  PENDING
  USED
  CANCELED
  EXPIRED
}

enum WEARABLE_STATUS {
  CONNECTED
  DISCONNECTED
}

enum WEARABLE_PLATFORM {
  ROOK
  AD_HOC
}

enum COACH_NOTE_TYPES {
  CLIENT
  DAY
}

enum WEARABLE_SOURCE_TYPE {
  LOCAL
  REMOTE
  UNSPECIFIED
}
